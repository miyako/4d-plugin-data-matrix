/* --------------------------------------------------------------------------------
 #
 #	4DPlugin-DMTX.h
 #	source generated by 4D Plugin Wizard
 #	Project : DMTX
 #	author : miyako
 #	2019/08/17
 #  
 # --------------------------------------------------------------------------------*/

#ifndef PLUGIN_DMTX_H
#define PLUGIN_DMTX_H

#include "4DPluginAPI.h"

#include "C_TEXT.h"
#include "ARRAY_TEXT.h"
#include "C_LONGINT.h"
#include "C_BLOB.h"

#if VERSIONMAC
#include <CoreGraphics/CoreGraphics.h>
#else
#ifndef max
#define max(a,b) (((a) > (b)) ? (a) : (b))
#endif
#ifndef min
#define min(a,b) (((a) < (b)) ? (a) : (b))
#endif

#include <gdiplus.h>
#endif

#pragma mark -

void DMTX(PA_PluginParameters params);
void DMTX_Read_image(PA_PluginParameters params);

enum output_type_t
{
    DMTX_OUTPUT_JPG = 0,
    DMTX_OUTPUT_SVG = 1,
    DMTX_OUTPUT_PNG = 2
};


#include <string>

namespace barcode
{
#if VERSIONMAC
    typedef CGImageRef Image;
#else
#define _false FALSE
#define _true TRUE
    typedef Gdiplus::Bitmap *Image;
#endif
    typedef std::vector<uint8_t> Buf;
}

#include "dmtx.h"
#include "libpng16/png.h"
#include "jpeglib/jpeglib.h"

#define INCHES_PER_METER (100.0/2.54)
#define Scaled_to_fit_proportional (5)
#define CREATE_THUMBNAIL (679)
#define Picture_size (356)

void write_data_fn(png_structp png_ptr, png_bytep buf, png_size_t size);
void output_flush_fn(png_structp png_ptr);

#endif /* PLUGIN_DMTX_H */
